import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –Ω–∞ Render –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ø—Ä–æ—Å—Ç—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìù –¢–µ–∫—Å—Ç")
    kb.row("üé≠ –†–ü", "üß© –ò–≥—Ä—ã", "üìê –ó–∞–¥–∞—á–∏")
    kb.row("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
    kb.row("üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏")
    kb.row("üìñ –ò—Å—Ç–æ—Ä–∏—è")
    return kb

back_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
back_kb.add("üîô –ù–∞–∑–∞–¥")

# –ø–æ–¥–º–µ–Ω—é-–ø—Ä–∏–º–µ—Ä—ã
rp_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
rp_kb.row("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π RP", "‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å RP")
rp_kb.add("üîô –ù–∞–∑–∞–¥")

tasks_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
tasks_kb.row("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏", "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
tasks_kb.row("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏")
tasks_kb.add("üîô –ù–∞–∑–∞–¥")

gen_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
gen_kb.row("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üóÇ –°—Ç–∏–∫–µ—Ä")
gen_kb.row("üé¨ –í–∏–¥–µ–æ", "‚≠ï –ö—Ä—É–∂–æ—á–∫–∏")
gen_kb.row("üó£ –ê—É–¥–∏–æ")
gen_kb.add("üîô –ù–∞–∑–∞–¥")

files_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
files_kb.row("üìÅ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞")
files_kb.row("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
files_kb.add("üîô –ù–∞–∑–∞–¥")

games_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
games_kb.row("‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω—ã", "üß© –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
games_kb.row("üïµÔ∏è‚Äç‚ôÇÔ∏è –£–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã")
games_kb.add("üîô –ù–∞–∑–∞–¥")

history_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
history_kb.row("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä RP-—Å—Ü–µ–Ω", "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
history_kb.row("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
history_kb.add("üîô –ù–∞–∑–∞–¥")

# –ø—Ä–æ—Å—Ç–æ–π in-memory –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
USER_CTX = {}  # {chat_id: {"menu": "text"/"rp"/..., "data": {...}}}

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    USER_CTX.pop(message.chat.id, None)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –õ–∏—Ä–∞ ‚Äî NovaAI. –í—ã–±–∏—Ä–∞–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_kb())

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    cid = message.chat.id
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –¢–µ–∫—Å—Ç–µ ‚Äî –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¢–µ–∫—Å—Ç–∞
    ctx = USER_CTX.get(cid, {})
    if ctx.get("menu") == "text":
        # —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç-—Å–µ—Å—Å–∏–∏
        ctx.pop("text_history", None)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ctx)
    USER_CTX[cid] = {"menu": None, "data": ctx.get("data", {})}
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb())

@dp.message_handler(lambda m: m.text == "üìù –¢–µ–∫—Å—Ç")
async def enter_text(message: types.Message):
    cid = message.chat.id
    USER_CTX[cid] = {"menu": "text", "text_history": []}
    await message.answer("–í–æ—à—ë–ª –≤ —Ä–∞–∑–¥–µ–ª –¢–µ–∫—Å—Ç. –ü–∏—à–∏ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å (—ç—Ç–æ —á–∏—Å—Ç–∞—è —Å–µ—Å—Å–∏—è). –ù–∞–∂–º–∏ '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.", reply_markup=back_kb)

@dp.message_handler(lambda m: m.text == "üé≠ –†–ü")
async def enter_rp(message: types.Message):
    cid = message.chat.id
    ctx = USER_CTX.get(cid, {})
    # –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ RP-—Å–µ—Å—Å–∏—è ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º
    USER_CTX[cid] = ctx
    USER_CTX[cid].setdefault("menu", "rp")
    USER_CTX[cid].setdefault("rp_history", [])
    await message.answer("–†–∞–∑–¥–µ–ª RP. –í—ã–±–µ—Ä–∏: –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π RP –∏–ª–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=rp_kb)

@dp.message_handler(lambda m: m.text == "üß© –ò–≥—Ä—ã")
async def enter_games(message: types.Message):
    cid = message.chat.id
    USER_CTX.setdefault(cid, {})["menu"] = "games"
    await message.answer("–†–∞–∑–¥–µ–ª –ò–≥—Ä—ã. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–≥—Ä—ã.", reply_markup=games_kb)

@dp.message_handler(lambda m: m.text == "üìê –ó–∞–¥–∞—á–∏")
async def enter_tasks(message: types.Message):
    cid = message.chat.id
    USER_CTX.setdefault(cid, {})["menu"] = "tasks"
    USER_CTX[cid].setdefault("tasks_history", [])
    await message.answer("–†–∞–∑–¥–µ–ª –ó–∞–¥–∞—á–∏. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏.", reply_markup=tasks_kb)

@dp.message_handler(lambda m: m.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def enter_gen(message: types.Message):
    cid = message.chat.id
    USER_CTX.setdefault(cid, {})["menu"] = "generation"
    USER_CTX[cid].setdefault("gen_history", [])
    await message.answer("–†–∞–∑–¥–µ–ª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è. –í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å.", reply_markup=gen_kb)

@dp.message_handler(lambda m: m.text == "üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏")
async def enter_files(message: types.Message):
    cid = message.chat.id
    USER_CTX.setdefault(cid, {})["menu"] = "files"
    await message.answer("–†–∞–∑–¥–µ–ª –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏.", reply_markup=files_kb)

@dp.message_handler(lambda m: m.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è")
async def enter_history(message: types.Message):
    cid = message.chat.id
    USER_CTX.setdefault(cid, {})["menu"] = "history"
    await message.answer("–†–∞–∑–¥–µ–ª –ò—Å—Ç–æ—Ä–∏—è.", reply_markup=history_kb)

# –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def message_router(message: types.Message):
    cid = message.chat.id
    text = message.text.strip()
    ctx = USER_CTX.get(cid, {"menu": None})
    menu = ctx.get("menu")

    if menu == "text":
        # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞: —ç—Ö–æ + —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        ctx.setdefault("text_history", []).append({"user": text})
        reply = f"–õ–∏—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞): —è –ø–æ–ª—É—á–∏–ª–∞: {text}"
        ctx.setdefault("text_history", []).append({"bot": reply})
        await message.answer(reply)
        return

    if menu == "rp":
        ctx.setdefault("rp_history", []).append({"user": text})
        await message.answer("RP: –∑–∞–ø–æ–º–Ω–∏–ª. (–ó–∞–≥–ª—É—à–∫–∞).")
        return

    if menu == "tasks":
        ctx.setdefault("tasks_history", []).append({"user": text})
        await message.answer("–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞. –Ø –ø–æ–ø—Ä–æ–±—É—é —Ä–µ—à–∏—Ç—å (–∑–∞–≥–ª—É—à–∫–∞).")
        return

    if menu == "generation":
        ctx.setdefault("gen_history", []).append({"user": text})
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å. (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    if menu == "files":
        await message.answer("–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏: –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    if menu == "games":
        await message.answer("–ò–≥—Ä—ã: –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é. (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    # –µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_kb())

@dp.message_handler(content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO])
async def handle_files(message: types.Message):
    cid = message.chat.id
    ctx = USER_CTX.setdefault(cid, {"menu": None})
    menu = ctx.get("menu")
    if menu == "tasks":
        await message.answer("–§–∞–π–ª/—Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏. (–ó–∞–≥–ª—É—à–∫–∞ ‚Äî –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç OCR/—Ä–µ—à–µ–Ω–∏–µ)")
        return
    if menu == "files":
        await message.answer("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç (–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏).")
        return
    await message.answer("–§–∞–π–ª/—Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.")

if __name__ == "__main__":
    print("Bot started (local).")
    executor.start_polling(dp, skip_updates=True)
